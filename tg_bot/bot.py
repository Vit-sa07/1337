import json
from io import BytesIO

import telebot
from telebot import types
import requests

API_TOKEN = '–¢–æ–∫–µ–Ω'
bot = telebot.TeleBot(API_TOKEN)

# Endpoint for your DRF API
API_ENDPOINT = 'http://127.0.0.1:8000/api/users/register/'
API_ENDPOINT_PROFILE = 'http://127.0.0.1:8000/api/users/profile/'
API_URL = 'http://127.0.0.1:8000/api/products/'
API_ENDPOINT_ADD_TO_CART = 'http://127.0.0.1:8000/api/products/cart/add/'
API_ENDPOINT_REMOVE_FROM_CART = 'http://127.0.0.1:8000/api/products/cart/remove/'
API_ENDPOINT_CART = 'http://127.0.0.1:8000/api/products/cart/'
API_ENDPOINT_PRODUCT = 'http://127.0.0.1:8000/api/products/products/'
API_ENDPOINT_CREATE_TICKET = 'http://127.0.0.1:8000/api/support/tickets/'
MANAGER_USERNAME = 'hjhvlk'
# User data storage
user_data = {}


def show_main_menu(chat_id, registered=True):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    if registered:
        markup.add('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üõí –ö–æ—Ä–∑–∏–Ω–∞', 'üì¶ –ö–∞—Ç–∞–ª–æ–≥', 'üîß –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', '‚úâÔ∏è –û—Ç–∑—ã–≤—ã')
    else:
        markup.add('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)


def is_user_registered(telegram_id):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ. """
    response = requests.get(f'{API_ENDPOINT_PROFILE}{telegram_id}/')
    return response.status_code == 200


@bot.message_handler(func=lambda message: message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def handle_main_menu(message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    show_main_menu(message.chat.id, registered=True)


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    user_telegram_id = message.from_user.id
    response = requests.get(f'{API_ENDPOINT_PROFILE}{user_telegram_id}/')
    if response.status_code == 200:
        show_main_menu(message.chat.id, registered=True)
    else:
        show_main_menu(message.chat.id, registered=False)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.text == 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        register(message)
        return
    if not is_user_registered(message.from_user.id):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        bot.send_message(message.chat.id, "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.")
        show_main_menu(message.chat.id, registered=False)
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
        handle_profile(message)
    elif message.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
        view_cart(message)
    elif message.text == 'üì¶ –ö–∞—Ç–∞–ª–æ–≥':
        catalog(message)  # –ü—Ä–∏–º–µ—Ä. –ú–µ–Ω—è–π—Ç–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –ª–æ–≥–∏–∫–∏
    elif message.text == 'üîß –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏':
        handle_support(message)
    elif message.text == '‚úâÔ∏è –û—Ç–∑—ã–≤—ã':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã
        pass
    elif message.text == '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        handle_order_confirmation(message)
    elif message.text == 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        handle_main_menu(message)


def register(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    bot.register_next_step_handler(msg, process_full_name_step)


def process_full_name_step(message):
    try:
        chat_id = message.chat.id
        full_name = message.text
        user_data[chat_id] = {'full_name': full_name}

        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
        bot.register_next_step_handler(msg, process_phone_number_step)
    except Exception as e:
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')


def process_phone_number_step(message):
    try:
        chat_id = message.chat.id
        phone_number = message.text
        user_data[chat_id]['phone_number'] = phone_number

        msg = bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≥–æ—Ä–æ–¥:')
        bot.register_next_step_handler(msg, process_city_step)
    except Exception as e:
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')


def process_city_step(message):
    try:
        chat_id = message.chat.id
        city = message.text
        user_data[chat_id]['city'] = city

        msg = bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')
        bot.register_next_step_handler(msg, process_age_step)
    except Exception as e:
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')


def process_age_step(message):
    try:
        chat_id = message.chat.id
        age = message.text

        # Validate if age is a number
        if not age.isdigit() or int(age) <= 0:
            msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).:")
            bot.register_next_step_handler(msg, process_age_step)
            return

        user_data[chat_id]['age'] = age
        user_data[chat_id]['telegram_id'] = message.from_user.id

        # Finally, register the user
        register_user(chat_id)
    except Exception as e:
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')


def register_user(chat_id):
    data = user_data.get(chat_id)
    if data:
        # Modify payload as needed
        payload = {
            "user": {
                "username": str(data['telegram_id']),  # Using telegram_id as username
                "email": "",  # You can also collect email from the user
                "password": "defaultpassword"  # Set a default or random password
            },
            "telegram_id": data['telegram_id'],
            "phone_number": data['phone_number'],
            "full_name": data['full_name'],
            "city": data['city'],
            "age": data['age']
        }

        response = requests.post(API_ENDPOINT, json=payload)
        if response.status_code == 201:
            bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!")
            show_main_menu(chat_id, registered=True)
        else:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏(")
    else:
        bot.send_message(chat_id, "–í–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")


def handle_profile(message):
    user_telegram_id = message.from_user.id
    url = f'http://127.0.0.1:8000/api/users/profile/{user_telegram_id}/'
    response = requests.get(url)

    if response.status_code == 200:
        profile_data = response.json()
        profile_info = f"*üë§ {profile_data['full_name']}*\n\n"
        profile_info += f"*üèôÔ∏è –ì–æ—Ä–æ–¥:* {profile_data['city']}\n"
        profile_info += f"*üéÇ –í–æ–∑—Ä–∞—Å—Ç:* {profile_data['age']}\n"
        profile_info += f"*üí∞ –°–∫–∏–¥–∫–∞:* {profile_data['discount']} RUB\n"
        profile_info += f"*üîë –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:* `{profile_data['referral_code']}`\n"
        bot.send_message(message.chat.id, profile_info, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ.")


@bot.message_handler(commands=['referral'])
def handle_referral(message):
    msg = bot.send_message(message.chat.id, "Please enter the referral code:")
    bot.register_next_step_handler(msg, process_referral_code, message.from_user.id)


def process_referral_code(message, user_telegram_id):
    referral_code = message.text
    url = 'http://127.0.0.1:8000/api/users/referral/'
    data = {
        'telegram_id': user_telegram_id,
        'referral_code': referral_code
    }
    headers = {'Content-type': 'application/json', 'Accept': 'application/json'}
    response = requests.post(url, data=json.dumps(data), headers=headers)

    if response.status_code == 200:
        bot.send_message(message.chat.id, "Referral code applied successfully. You've earned a discount!")
    else:
        bot.send_message(message.chat.id, "Failed to apply referral code. Please check the code and try again.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('addtocart:'))
def add_to_cart_callback(call):
    product_id = call.data.split(':')[1]
    telegram_id = call.from_user.id

    payload = {
        'telegram_id': telegram_id,
        'product_id': product_id,
        'quantity': 1  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    response = requests.post(API_ENDPOINT_ADD_TO_CART, json=payload)

    if response.status_code == 201:
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    else:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É.", show_alert=True)


def process_remove_from_cart_step(message, user_telegram_id):
    cart_item_id = message.text
    payload = {'cart_item_id': cart_item_id}
    url = f"{API_ENDPOINT_REMOVE_FROM_CART}{user_telegram_id}/"
    response = requests.delete(url, json=payload)
    if response.status_code == 204:
        bot.reply_to(message, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    else:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")


@bot.message_handler(func=lambda message: message.text == '–ö–∞—Ç–∞–ª–æ–≥')
def catalog(message):
    # –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å API
    response = requests.get(API_URL + 'categories/')
    if response.status_code == 200:
        categories = response.json()
        markup = types.InlineKeyboardMarkup()
        for category in categories:
            callback_data = f"category:{category['id']}"
            markup.add(types.InlineKeyboardButton(category['name'], callback_data=callback_data))
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.')


@bot.callback_query_handler(func=lambda call: call.data.startswith('category:'))
def category_callback(call):
    category_id = call.data.split(':')[1]
    request_url = API_URL + f'products/?category_id={category_id}'
    response = requests.get(request_url)
    if response.status_code == 200:
        products = response.json()
        if products:
            markup = types.InlineKeyboardMarkup()
            for product in products:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
                button_text = f"üî∏ {product['name']} - {product['price']} —Ä—É–±."
                callback_data = f"product:{product['id']}"
                markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='üõç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:',
                                  reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, 'üö´ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.')
    else:
        bot.send_message(call.message.chat.id,
                         f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.')


@bot.callback_query_handler(func=lambda call: call.data.startswith('product:'))
def product_callback(call):
    product_id = call.data.split(':')[1]
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ —Å API
    response = requests.get(API_ENDPOINT_PRODUCT + f'{product_id}/')
    if response.status_code == 200:
        product = response.json()

        # –°–±–æ—Ä–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        media_group = []
        for image_info in product['images']:
            image_url = image_info['image']
            photo = requests.get(image_url).content
            media = types.InputMediaPhoto(photo)
            media_group.append(media)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
        if media_group:
            bot.send_media_group(call.message.chat.id, media_group)

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
        product_text = f"üîπ {product['name']}\nüí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n{product['description']}"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'addtocart:{product_id}'))
        bot.send_message(call.message.chat.id, text=product_text, reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.')


def view_cart(message):
    telegram_id = message.from_user.id
    response = requests.get(f"{API_ENDPOINT_CART}{telegram_id}/")

    if response.status_code == 200:
        cart_data = response.json()
        items = cart_data.get('items', [])
        if items:
            for item in items:
                product_id = item['product']
                product_response = requests.get(f"{API_ENDPOINT_PRODUCT}{product_id}/")
                if product_response.status_code == 200:
                    product_details = product_response.json()
                    product_info = f"{product_details['name']} - {item['quantity']} —à—Ç. –ø–æ {product_details['price']} —Ä—É–±."
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"removefromcart:{item['id']}"))
                    bot.send_message(message.chat.id, product_info, reply_markup=markup)
            # –ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            markup_actions = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            order_button = types.KeyboardButton('‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
            delete_all_button = types.KeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ')
            main_menu_button = types.KeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

            markup_actions.add(order_button, delete_all_button, main_menu_button)
            bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markup_actions)

        else:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('removefromcart:'))
def remove_from_cart_callback(call):
    cart_item_id = call.data.split(':')[1]
    telegram_id = call.from_user.id
    payload = {'cart_item_id': cart_item_id}
    url = f"{API_ENDPOINT_REMOVE_FROM_CART}{telegram_id}/"
    response = requests.delete(url, json=payload)
    if response.status_code == 204:
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
        view_cart(call.message)
    else:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.", show_alert=True)


def handle_order_confirmation(message):
    telegram_id = message.from_user.id
    response = requests.get(f"http://127.0.0.1:8000/api/products/cart/{telegram_id}/")

    if response.status_code == 200:
        cart_data = response.json()
        items = cart_data.get('items', [])
        if items:
            order_details = "üõç *–°–æ—Å—Ç–∞–≤ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:*\n\n"
            total_sum = 0
            for item in items:
                product_response = requests.get(f"http://127.0.0.1:8000/api/products/products/{item['product']}/")
                if product_response.status_code == 200:
                    product_details = product_response.json()
                    order_details += f"```üîπ {product_details['name']} - {item['quantity']} —à—Ç. –ø–æ {product_details['price']} —Ä—É–±.\n"
                    total_sum += item['quantity'] * float(product_details['price'])
            order_details += f"\nüí∞ *–û–±—â–∞—è —Å—É–º–º–∞:* {total_sum} —Ä—É–±.\n```"
            order_manger = "\nüë©‚Äçüíº _–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–∫–∞–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É._"

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
            markup = types.InlineKeyboardMarkup()
            contact_manager_button = types.InlineKeyboardButton(
                text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
                url=f"https://t.me/{MANAGER_USERNAME}"
            )
            markup.add(contact_manager_button)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞ –∏ –∫–Ω–æ–ø–∫–æ–π
            bot.send_message(message.chat.id, order_details, parse_mode='Markdown')
            bot.send_message(message.chat.id, order_manger, reply_markup=markup, parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, "üö´ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—Ä–∑–∏–Ω–µ.")


@bot.callback_query_handler(func=lambda call: call.data == 'removeallfromcart')
def remove_all_from_cart_callback(call):
    telegram_id = call.from_user.id
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    # response = requests.delete(API_ENDPOINT_REMOVE_ALL_FROM_CART, json={'telegram_id': telegram_id})
    # if response.status_code == 204:
    bot.answer_callback_query(call.id, "–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    # else:
    #     bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É.", show_alert=True)


def create_ticket_in_drf(telegram_id, title, content):
    user_response = requests.get(f'http://127.0.0.1:8000/api/users/profile/{telegram_id}/')
    if user_response.status_code == 200:
        user_data = user_response.json()
        user_id = user_data['id']  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print()
        ticket_data = {
            'title': title,
            'content': content,
            'status': 'open',
            'user': user_id
        }
        print(ticket_data)
        headers = {'Content-Type': 'application/json'}
        response = requests.post('http://127.0.0.1:8000/api/support/tickets/', json=ticket_data, headers=headers)
        return response.status_code == 201

    else:
        return False


def handle_support(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
    bot.register_next_step_handler(msg, process_support_message, chat_id)


def process_support_message(message, chat_id):
    telegram_id = message.from_user.id
    content = message.text
    title = "–ó–∞–ø—Ä–æ—Å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏"

    if create_ticket_in_drf(telegram_id, title, content):
        bot.send_message(chat_id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
        notify_admin_about_ticket(telegram_id, title, content)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    else:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")



ADMIN_CHAT_ID = '576113936'  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ Telegram

def notify_admin_about_ticket(telegram_id, title, content):
    admin_message = f"–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n\n–û—Ç: {telegram_id}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content}"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'reply:{telegram_id}'))
    bot.send_message(ADMIN_CHAT_ID, admin_message, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('reply:'))
def handle_reply_callback(call):
    ticket_id = call.data.split(':')[1]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    user_data[call.from_user.id] = {'replying_to': ticket_id}
    bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ:")


def get_user_id_by_telegram_id(telegram_id):
    response = requests.get(f'http://127.0.0.1:8000/api/users/profile/{telegram_id}/')
    if response.status_code == 200:
        user_data = response.json()
        return user_data['user']['id']
    else:
        return None


@bot.message_handler(func=lambda message: 'replying_to' in user_data.get(message.from_user.id, {}))
def handle_admin_response(message):
    ticket_id = user_data[message.from_user.id]['replying_to']
    response_content = message.text
    user_id = get_user_id_by_telegram_id(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id is None:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ API
    response = requests.post(
        'http://127.0.0.1:8000/api/support/responses/',
        headers={'Content-Type': 'application/json'},
        json={'content': response_content, 'ticket': ticket_id, 'user': user_id}
    )
    if response.status_code == 201:
        bot.send_message(message.chat.id, "–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")

    del user_data[message.from_user.id]['replying_to']  # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –æ—Ç–≤–µ—Ç–µ


bot.polling(none_stop=True)
